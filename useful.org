#+title: Useful Stuff
#+language: en

#+name: code
#+begin_src elisp :results silent
  (require 'org)

  (defun insert-src-block (lang look &optional results-specifier)
    (insert (format "#+begin_src %s%s\n\n#+end_src" lang
                    (if results-specifier
                        (concat " :results " results-specifier)
                      "")))
    (forward-line -3)
    (beginning-of-line)
    (if (looking-at look)
        (progn
          (kill-line)
          (delete-char 1)
          (forward-line))
      (forward-line 2))
    (insert "  "))

  (defun el ()
    (insert-src-block "elisp" "(el"))

  (defun elc ()
    (insert-src-block "elisp" "(el" "code"))

  (defun elo ()
    (insert-src-block "elisp" "(el" "output"))

  (defun elr ()
    (insert-src-block "elisp" "(el" "raw"))

  (defun els ()
    (insert-src-block "elisp" "(el" "silent"))

  (defun elv ()
    (insert-src-block "elisp" "(el" "value"))

  (defun sh ()
    (insert-src-block "sh" "(sh"))

  (defun sho ()
    (insert-src-block "sh" "(sh" "output"))

  (defun shs ()
    (insert-src-block "sh" "(sh" "silent"))

  (defun insert-org-file-header (title)
    (interactive "sEnter title: ")
    (insert "-*- mode: org -*-\n#+title: ")
    (insert title)
    (insert "
#+language: en
#+options: H:4 num:nil toc:nil \\n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not \"HINT\")
#+options: html-postamble:nil
#+startup: entitiespretty showeverything
#+setupfile: theme-bigblow.setup

"))

  (global-set-key (kbd "C-;") 'set-work-folder-command)

  (defun set-work-folder-command (dir)
    (interactive "GEnter WORK folder: ")
    (set-work-folder dir))

  (defun set-work-folder (directory)
    (let ((dir (or directory default-directory))
          env-setting-file)
      (unless (string= (getenv "WORK") dir)
        (setenv "WORK" dir)
        ;; make it permanent
        (if (setq env-setting-file
                  (case system-type
                    (windows-nt nil)
                    (darwin "~/.bash_profile")
                    (gnu/linux "~/.bashrc")
                    (t "nonexistent")))
            (store-work-environment-variable env-setting-file dir)
          (set-work-environment-variable dir)))))

  (defun store-work-environment-variable (env-setting-file dir)
    (with-temp-buffer
      (insert-file-contents env-setting-file)
      (goto-char (point-min))
      (if (search-forward-regexp "export WORK=\\(.*\\)" (point-max) t)
          (replace-match (format "\"%s\"" dir) t t nil 1)
        (goto-char (point-max))
        (insert (format "\nexport WORK=\"%s\"\n" dir)))
      (write-file env-setting-file)))

  (when (eq system-type 'windows-nt)
    (setq w32-allow-system-shell t)) ; enables cmd.exe as shell

  (defun set-work-environment-variable (directory)
    (shell-command (format "setx WORK \"%s\""
                           (directory-file-name (expand-file-name directory)))))

  (defun copy-files-from-dot-spacemacs-dot-d ()
    (let* ((work-env (getenv "WORK"))
           (work-folder (and (stringp work-env) (file-name-as-directory work-env)))
           (from-folder (file-name-as-directory
                         (concat (file-name-as-directory
                                  (getenv "HOME"))
                                 ".spacemacs.d")))
           (files-to-copy '("generic-instructions.txt"
                            "time-considerations.txt"
                            "theme-bigblow.setup"))
           file-to-copy)
      (if (not work-folder)
          (error "set WORK folder first using C-;")
        (dolist (file files-to-copy)
          (when (file-readable-p
                 (setq file-to-copy (concat from-folder file)))
            (copy-file file-to-copy work-folder t t t t))))))

  (defun relocate-file-to-work-folder (&optional copy-not-move)
    (let* ((work-env (getenv "WORK"))
           (work-folder (and (stringp work-env) (file-name-as-directory work-env))))
      (if (not work-folder)
          (error "set WORK folder first using C-;")
        (let* (((this-file-name (file-name-nondirectory (buffer-file-name)))
                (dest-file-name (concat work-folder this-file-name))))
          (mkdir work-folder t)
          (if copy-not-move
              (copy-file this-file-name dest-file-name t)
            (rename-file this-file-name dest-file-name))
          (find-alternate-file dest-file-name)
          dest-file-name))))

  (defun calculate-score (possible-points-alist)
    (loop with named-list-alist =
          (org-element-map (org-element-parse-buffer) 'plain-list
            (lambda (plain-list) (cons (org-element-property :name plain-list)
                                       (org-element-property :structure plain-list))))
          for (category-symbol . category-points) in possible-points-alist
          sum (loop for checked in
                    (loop for el in
                          (cdr (assoc (concat "assertions-" (symbol-name category-symbol))
                                      named-list-alist))
                          collect (string= (nth 4 el) "[X]"))
                    for points in category-points
                    when checked
                    sum points)))

  ;; automatically save buffer before evaluating code blocks
  ;; by adding 'save-buffer to the org-ctrl-c-ctrl-c-hook list.
  (setq org-ctrl-c-ctrl-c-hook (cons 'save-buffer org-ctrl-c-ctrl-c-hook))

  (defun dm/display-inline-images ()
    (condition-case t
      (org-display-inline-images)
      (error nil)))

  (add-hook 'org-babel-after-execute-hook 'dm/display-inline-images 'append)
#+end_src
